// lab2q.v

// Generated using ACDS version 14.1 186 at 2015.05.24.14:06:18

`timescale 1 ps / 1 ps
module lab2q (
		input  wire        clk_clk,       //       clk.clk
		output wire        clk_sdram_clk, // clk_sdram.clk
		inout  wire        mouse_CLK,     //     mouse.CLK
		inout  wire        mouse_DAT,     //          .DAT
		input  wire        reset_reset_n, //     reset.reset_n
		output wire [12:0] sram_addr,     //      sram.addr
		output wire [1:0]  sram_ba,       //          .ba
		output wire        sram_cas_n,    //          .cas_n
		output wire        sram_cke,      //          .cke
		output wire        sram_cs_n,     //          .cs_n
		inout  wire [15:0] sram_dq,       //          .dq
		output wire [1:0]  sram_dqm,      //          .dqm
		output wire        sram_ras_n,    //          .ras_n
		output wire        sram_we_n,     //          .we_n
		output wire        vga_out_CLK,   //   vga_out.CLK
		output wire        vga_out_HS,    //          .HS
		output wire        vga_out_VS,    //          .VS
		output wire        vga_out_BLANK, //          .BLANK
		output wire        vga_out_SYNC,  //          .SYNC
		output wire [7:0]  vga_out_R,     //          .R
		output wire [7:0]  vga_out_G,     //          .G
		output wire [7:0]  vga_out_B      //          .B
	);

	wire         blender_avalon_blended_source_valid;                                     // blender:output_valid -> fifo:stream_in_valid
	wire  [29:0] blender_avalon_blended_source_data;                                      // blender:output_data -> fifo:stream_in_data
	wire         blender_avalon_blended_source_ready;                                     // fifo:stream_in_ready -> blender:output_ready
	wire         blender_avalon_blended_source_startofpacket;                             // blender:output_startofpacket -> fifo:stream_in_startofpacket
	wire         blender_avalon_blended_source_endofpacket;                               // blender:output_endofpacket -> fifo:stream_in_endofpacket
	wire         character_buffer_avalon_char_source_valid;                               // character_buffer:stream_valid -> blender:foreground_valid
	wire  [39:0] character_buffer_avalon_char_source_data;                                // character_buffer:stream_data -> blender:foreground_data
	wire         character_buffer_avalon_char_source_ready;                               // blender:foreground_ready -> character_buffer:stream_ready
	wire         character_buffer_avalon_char_source_startofpacket;                       // character_buffer:stream_startofpacket -> blender:foreground_startofpacket
	wire         character_buffer_avalon_char_source_endofpacket;                         // character_buffer:stream_endofpacket -> blender:foreground_endofpacket
	wire         fifo_avalon_dc_buffer_source_valid;                                      // fifo:stream_out_valid -> vga_controller:valid
	wire  [29:0] fifo_avalon_dc_buffer_source_data;                                       // fifo:stream_out_data -> vga_controller:data
	wire         fifo_avalon_dc_buffer_source_ready;                                      // vga_controller:ready -> fifo:stream_out_ready
	wire         fifo_avalon_dc_buffer_source_startofpacket;                              // fifo:stream_out_startofpacket -> vga_controller:startofpacket
	wire         fifo_avalon_dc_buffer_source_endofpacket;                                // fifo:stream_out_endofpacket -> vga_controller:endofpacket
	wire         pixel_buffer_avalon_pixel_source_valid;                                  // pixel_buffer:stream_valid -> resampler:stream_in_valid
	wire  [15:0] pixel_buffer_avalon_pixel_source_data;                                   // pixel_buffer:stream_data -> resampler:stream_in_data
	wire         pixel_buffer_avalon_pixel_source_ready;                                  // resampler:stream_in_ready -> pixel_buffer:stream_ready
	wire         pixel_buffer_avalon_pixel_source_startofpacket;                          // pixel_buffer:stream_startofpacket -> resampler:stream_in_startofpacket
	wire         pixel_buffer_avalon_pixel_source_endofpacket;                            // pixel_buffer:stream_endofpacket -> resampler:stream_in_endofpacket
	wire         resampler_avalon_rgb_source_valid;                                       // resampler:stream_out_valid -> scaler:stream_in_valid
	wire  [29:0] resampler_avalon_rgb_source_data;                                        // resampler:stream_out_data -> scaler:stream_in_data
	wire         resampler_avalon_rgb_source_ready;                                       // scaler:stream_in_ready -> resampler:stream_out_ready
	wire         resampler_avalon_rgb_source_startofpacket;                               // resampler:stream_out_startofpacket -> scaler:stream_in_startofpacket
	wire         resampler_avalon_rgb_source_endofpacket;                                 // resampler:stream_out_endofpacket -> scaler:stream_in_endofpacket
	wire         scaler_avalon_scaler_source_valid;                                       // scaler:stream_out_valid -> blender:background_valid
	wire  [29:0] scaler_avalon_scaler_source_data;                                        // scaler:stream_out_data -> blender:background_data
	wire         scaler_avalon_scaler_source_ready;                                       // blender:background_ready -> scaler:stream_out_ready
	wire         scaler_avalon_scaler_source_startofpacket;                               // scaler:stream_out_startofpacket -> blender:background_startofpacket
	wire         scaler_avalon_scaler_source_endofpacket;                                 // scaler:stream_out_endofpacket -> blender:background_endofpacket
	wire         sys_sdram_pll_sys_clk_clk;                                               // sys_sdram_pll:sys_clk_clk -> [blender:clk, character_buffer:clk, cpu:clk, fifo:clk_stream_in, irq_mapper:clk, jtag_uart:clk, mm_interconnect_0:sys_sdram_pll_sys_clk_clk, mm_interconnect_1:sys_sdram_pll_sys_clk_clk, mouse_0:clk, onchip_mem:clk, pixel_buffer:clk, resampler:clk, rst_controller:clk, rst_controller_002:clk, scaler:clk, sdram_controller:clk, sysid:clock]
	wire         video_clk_vga_clk_clk;                                                   // video_clk:vga_clk_clk -> [fifo:clk_stream_out, rst_controller_001:clk, vga_controller:clk]
	wire         pixel_buffer_avalon_pixel_dma_master_waitrequest;                        // mm_interconnect_0:pixel_buffer_avalon_pixel_dma_master_waitrequest -> pixel_buffer:master_waitrequest
	wire  [15:0] pixel_buffer_avalon_pixel_dma_master_readdata;                           // mm_interconnect_0:pixel_buffer_avalon_pixel_dma_master_readdata -> pixel_buffer:master_readdata
	wire  [31:0] pixel_buffer_avalon_pixel_dma_master_address;                            // pixel_buffer:master_address -> mm_interconnect_0:pixel_buffer_avalon_pixel_dma_master_address
	wire         pixel_buffer_avalon_pixel_dma_master_read;                               // pixel_buffer:master_read -> mm_interconnect_0:pixel_buffer_avalon_pixel_dma_master_read
	wire         pixel_buffer_avalon_pixel_dma_master_readdatavalid;                      // mm_interconnect_0:pixel_buffer_avalon_pixel_dma_master_readdatavalid -> pixel_buffer:master_readdatavalid
	wire         pixel_buffer_avalon_pixel_dma_master_lock;                               // pixel_buffer:master_arbiterlock -> mm_interconnect_0:pixel_buffer_avalon_pixel_dma_master_lock
	wire         mm_interconnect_0_onchip_mem_s1_chipselect;                              // mm_interconnect_0:onchip_mem_s1_chipselect -> onchip_mem:chipselect
	wire  [31:0] mm_interconnect_0_onchip_mem_s1_readdata;                                // onchip_mem:readdata -> mm_interconnect_0:onchip_mem_s1_readdata
	wire  [15:0] mm_interconnect_0_onchip_mem_s1_address;                                 // mm_interconnect_0:onchip_mem_s1_address -> onchip_mem:address
	wire   [3:0] mm_interconnect_0_onchip_mem_s1_byteenable;                              // mm_interconnect_0:onchip_mem_s1_byteenable -> onchip_mem:byteenable
	wire         mm_interconnect_0_onchip_mem_s1_write;                                   // mm_interconnect_0:onchip_mem_s1_write -> onchip_mem:write
	wire  [31:0] mm_interconnect_0_onchip_mem_s1_writedata;                               // mm_interconnect_0:onchip_mem_s1_writedata -> onchip_mem:writedata
	wire         mm_interconnect_0_onchip_mem_s1_clken;                                   // mm_interconnect_0:onchip_mem_s1_clken -> onchip_mem:clken
	wire  [31:0] cpu_data_master_readdata;                                                // mm_interconnect_1:cpu_data_master_readdata -> cpu:d_readdata
	wire         cpu_data_master_waitrequest;                                             // mm_interconnect_1:cpu_data_master_waitrequest -> cpu:d_waitrequest
	wire         cpu_data_master_debugaccess;                                             // cpu:jtag_debug_module_debugaccess_to_roms -> mm_interconnect_1:cpu_data_master_debugaccess
	wire  [27:0] cpu_data_master_address;                                                 // cpu:d_address -> mm_interconnect_1:cpu_data_master_address
	wire   [3:0] cpu_data_master_byteenable;                                              // cpu:d_byteenable -> mm_interconnect_1:cpu_data_master_byteenable
	wire         cpu_data_master_read;                                                    // cpu:d_read -> mm_interconnect_1:cpu_data_master_read
	wire         cpu_data_master_write;                                                   // cpu:d_write -> mm_interconnect_1:cpu_data_master_write
	wire  [31:0] cpu_data_master_writedata;                                               // cpu:d_writedata -> mm_interconnect_1:cpu_data_master_writedata
	wire  [31:0] cpu_instruction_master_readdata;                                         // mm_interconnect_1:cpu_instruction_master_readdata -> cpu:i_readdata
	wire         cpu_instruction_master_waitrequest;                                      // mm_interconnect_1:cpu_instruction_master_waitrequest -> cpu:i_waitrequest
	wire  [27:0] cpu_instruction_master_address;                                          // cpu:i_address -> mm_interconnect_1:cpu_instruction_master_address
	wire         cpu_instruction_master_read;                                             // cpu:i_read -> mm_interconnect_1:cpu_instruction_master_read
	wire         cpu_instruction_master_readdatavalid;                                    // mm_interconnect_1:cpu_instruction_master_readdatavalid -> cpu:i_readdatavalid
	wire         mm_interconnect_1_character_buffer_avalon_char_buffer_slave_chipselect;  // mm_interconnect_1:character_buffer_avalon_char_buffer_slave_chipselect -> character_buffer:buf_chipselect
	wire   [7:0] mm_interconnect_1_character_buffer_avalon_char_buffer_slave_readdata;    // character_buffer:buf_readdata -> mm_interconnect_1:character_buffer_avalon_char_buffer_slave_readdata
	wire         mm_interconnect_1_character_buffer_avalon_char_buffer_slave_waitrequest; // character_buffer:buf_waitrequest -> mm_interconnect_1:character_buffer_avalon_char_buffer_slave_waitrequest
	wire  [12:0] mm_interconnect_1_character_buffer_avalon_char_buffer_slave_address;     // mm_interconnect_1:character_buffer_avalon_char_buffer_slave_address -> character_buffer:buf_address
	wire         mm_interconnect_1_character_buffer_avalon_char_buffer_slave_read;        // mm_interconnect_1:character_buffer_avalon_char_buffer_slave_read -> character_buffer:buf_read
	wire   [0:0] mm_interconnect_1_character_buffer_avalon_char_buffer_slave_byteenable;  // mm_interconnect_1:character_buffer_avalon_char_buffer_slave_byteenable -> character_buffer:buf_byteenable
	wire         mm_interconnect_1_character_buffer_avalon_char_buffer_slave_write;       // mm_interconnect_1:character_buffer_avalon_char_buffer_slave_write -> character_buffer:buf_write
	wire   [7:0] mm_interconnect_1_character_buffer_avalon_char_buffer_slave_writedata;   // mm_interconnect_1:character_buffer_avalon_char_buffer_slave_writedata -> character_buffer:buf_writedata
	wire         mm_interconnect_1_character_buffer_avalon_char_control_slave_chipselect; // mm_interconnect_1:character_buffer_avalon_char_control_slave_chipselect -> character_buffer:ctrl_chipselect
	wire  [31:0] mm_interconnect_1_character_buffer_avalon_char_control_slave_readdata;   // character_buffer:ctrl_readdata -> mm_interconnect_1:character_buffer_avalon_char_control_slave_readdata
	wire   [0:0] mm_interconnect_1_character_buffer_avalon_char_control_slave_address;    // mm_interconnect_1:character_buffer_avalon_char_control_slave_address -> character_buffer:ctrl_address
	wire         mm_interconnect_1_character_buffer_avalon_char_control_slave_read;       // mm_interconnect_1:character_buffer_avalon_char_control_slave_read -> character_buffer:ctrl_read
	wire   [3:0] mm_interconnect_1_character_buffer_avalon_char_control_slave_byteenable; // mm_interconnect_1:character_buffer_avalon_char_control_slave_byteenable -> character_buffer:ctrl_byteenable
	wire         mm_interconnect_1_character_buffer_avalon_char_control_slave_write;      // mm_interconnect_1:character_buffer_avalon_char_control_slave_write -> character_buffer:ctrl_write
	wire  [31:0] mm_interconnect_1_character_buffer_avalon_char_control_slave_writedata;  // mm_interconnect_1:character_buffer_avalon_char_control_slave_writedata -> character_buffer:ctrl_writedata
	wire  [31:0] mm_interconnect_1_pixel_buffer_avalon_control_slave_readdata;            // pixel_buffer:slave_readdata -> mm_interconnect_1:pixel_buffer_avalon_control_slave_readdata
	wire   [1:0] mm_interconnect_1_pixel_buffer_avalon_control_slave_address;             // mm_interconnect_1:pixel_buffer_avalon_control_slave_address -> pixel_buffer:slave_address
	wire         mm_interconnect_1_pixel_buffer_avalon_control_slave_read;                // mm_interconnect_1:pixel_buffer_avalon_control_slave_read -> pixel_buffer:slave_read
	wire   [3:0] mm_interconnect_1_pixel_buffer_avalon_control_slave_byteenable;          // mm_interconnect_1:pixel_buffer_avalon_control_slave_byteenable -> pixel_buffer:slave_byteenable
	wire         mm_interconnect_1_pixel_buffer_avalon_control_slave_write;               // mm_interconnect_1:pixel_buffer_avalon_control_slave_write -> pixel_buffer:slave_write
	wire  [31:0] mm_interconnect_1_pixel_buffer_avalon_control_slave_writedata;           // mm_interconnect_1:pixel_buffer_avalon_control_slave_writedata -> pixel_buffer:slave_writedata
	wire         mm_interconnect_1_jtag_uart_avalon_jtag_slave_chipselect;                // mm_interconnect_1:jtag_uart_avalon_jtag_slave_chipselect -> jtag_uart:av_chipselect
	wire  [31:0] mm_interconnect_1_jtag_uart_avalon_jtag_slave_readdata;                  // jtag_uart:av_readdata -> mm_interconnect_1:jtag_uart_avalon_jtag_slave_readdata
	wire         mm_interconnect_1_jtag_uart_avalon_jtag_slave_waitrequest;               // jtag_uart:av_waitrequest -> mm_interconnect_1:jtag_uart_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_1_jtag_uart_avalon_jtag_slave_address;                   // mm_interconnect_1:jtag_uart_avalon_jtag_slave_address -> jtag_uart:av_address
	wire         mm_interconnect_1_jtag_uart_avalon_jtag_slave_read;                      // mm_interconnect_1:jtag_uart_avalon_jtag_slave_read -> jtag_uart:av_read_n
	wire         mm_interconnect_1_jtag_uart_avalon_jtag_slave_write;                     // mm_interconnect_1:jtag_uart_avalon_jtag_slave_write -> jtag_uart:av_write_n
	wire  [31:0] mm_interconnect_1_jtag_uart_avalon_jtag_slave_writedata;                 // mm_interconnect_1:jtag_uart_avalon_jtag_slave_writedata -> jtag_uart:av_writedata
	wire         mm_interconnect_1_mouse_0_avalon_ps2_slave_chipselect;                   // mm_interconnect_1:mouse_0_avalon_ps2_slave_chipselect -> mouse_0:chipselect
	wire  [31:0] mm_interconnect_1_mouse_0_avalon_ps2_slave_readdata;                     // mouse_0:readdata -> mm_interconnect_1:mouse_0_avalon_ps2_slave_readdata
	wire         mm_interconnect_1_mouse_0_avalon_ps2_slave_waitrequest;                  // mouse_0:waitrequest -> mm_interconnect_1:mouse_0_avalon_ps2_slave_waitrequest
	wire   [0:0] mm_interconnect_1_mouse_0_avalon_ps2_slave_address;                      // mm_interconnect_1:mouse_0_avalon_ps2_slave_address -> mouse_0:address
	wire         mm_interconnect_1_mouse_0_avalon_ps2_slave_read;                         // mm_interconnect_1:mouse_0_avalon_ps2_slave_read -> mouse_0:read
	wire   [3:0] mm_interconnect_1_mouse_0_avalon_ps2_slave_byteenable;                   // mm_interconnect_1:mouse_0_avalon_ps2_slave_byteenable -> mouse_0:byteenable
	wire         mm_interconnect_1_mouse_0_avalon_ps2_slave_write;                        // mm_interconnect_1:mouse_0_avalon_ps2_slave_write -> mouse_0:write
	wire  [31:0] mm_interconnect_1_mouse_0_avalon_ps2_slave_writedata;                    // mm_interconnect_1:mouse_0_avalon_ps2_slave_writedata -> mouse_0:writedata
	wire  [31:0] mm_interconnect_1_sysid_control_slave_readdata;                          // sysid:readdata -> mm_interconnect_1:sysid_control_slave_readdata
	wire   [0:0] mm_interconnect_1_sysid_control_slave_address;                           // mm_interconnect_1:sysid_control_slave_address -> sysid:address
	wire  [31:0] mm_interconnect_1_cpu_jtag_debug_module_readdata;                        // cpu:jtag_debug_module_readdata -> mm_interconnect_1:cpu_jtag_debug_module_readdata
	wire         mm_interconnect_1_cpu_jtag_debug_module_waitrequest;                     // cpu:jtag_debug_module_waitrequest -> mm_interconnect_1:cpu_jtag_debug_module_waitrequest
	wire         mm_interconnect_1_cpu_jtag_debug_module_debugaccess;                     // mm_interconnect_1:cpu_jtag_debug_module_debugaccess -> cpu:jtag_debug_module_debugaccess
	wire   [8:0] mm_interconnect_1_cpu_jtag_debug_module_address;                         // mm_interconnect_1:cpu_jtag_debug_module_address -> cpu:jtag_debug_module_address
	wire         mm_interconnect_1_cpu_jtag_debug_module_read;                            // mm_interconnect_1:cpu_jtag_debug_module_read -> cpu:jtag_debug_module_read
	wire   [3:0] mm_interconnect_1_cpu_jtag_debug_module_byteenable;                      // mm_interconnect_1:cpu_jtag_debug_module_byteenable -> cpu:jtag_debug_module_byteenable
	wire         mm_interconnect_1_cpu_jtag_debug_module_write;                           // mm_interconnect_1:cpu_jtag_debug_module_write -> cpu:jtag_debug_module_write
	wire  [31:0] mm_interconnect_1_cpu_jtag_debug_module_writedata;                       // mm_interconnect_1:cpu_jtag_debug_module_writedata -> cpu:jtag_debug_module_writedata
	wire         mm_interconnect_1_sdram_controller_s1_chipselect;                        // mm_interconnect_1:sdram_controller_s1_chipselect -> sdram_controller:az_cs
	wire  [15:0] mm_interconnect_1_sdram_controller_s1_readdata;                          // sdram_controller:za_data -> mm_interconnect_1:sdram_controller_s1_readdata
	wire         mm_interconnect_1_sdram_controller_s1_waitrequest;                       // sdram_controller:za_waitrequest -> mm_interconnect_1:sdram_controller_s1_waitrequest
	wire  [24:0] mm_interconnect_1_sdram_controller_s1_address;                           // mm_interconnect_1:sdram_controller_s1_address -> sdram_controller:az_addr
	wire         mm_interconnect_1_sdram_controller_s1_read;                              // mm_interconnect_1:sdram_controller_s1_read -> sdram_controller:az_rd_n
	wire   [1:0] mm_interconnect_1_sdram_controller_s1_byteenable;                        // mm_interconnect_1:sdram_controller_s1_byteenable -> sdram_controller:az_be_n
	wire         mm_interconnect_1_sdram_controller_s1_readdatavalid;                     // sdram_controller:za_valid -> mm_interconnect_1:sdram_controller_s1_readdatavalid
	wire         mm_interconnect_1_sdram_controller_s1_write;                             // mm_interconnect_1:sdram_controller_s1_write -> sdram_controller:az_wr_n
	wire  [15:0] mm_interconnect_1_sdram_controller_s1_writedata;                         // mm_interconnect_1:sdram_controller_s1_writedata -> sdram_controller:az_data
	wire         irq_mapper_receiver0_irq;                                                // mouse_0:irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                                                // jtag_uart:av_irq -> irq_mapper:receiver1_irq
	wire  [31:0] cpu_d_irq_irq;                                                           // irq_mapper:sender_irq -> cpu:d_irq
	wire         rst_controller_reset_out_reset;                                          // rst_controller:reset_out -> [blender:reset, character_buffer:reset, cpu:reset_n, fifo:reset_stream_in, irq_mapper:reset, jtag_uart:rst_n, mm_interconnect_0:pixel_buffer_reset_reset_bridge_in_reset_reset, mm_interconnect_1:cpu_reset_n_reset_bridge_in_reset_reset, mouse_0:reset, onchip_mem:reset, pixel_buffer:reset, resampler:reset, rst_translator:in_reset, scaler:reset]
	wire         rst_controller_reset_out_reset_req;                                      // rst_controller:reset_req -> [cpu:reset_req, onchip_mem:reset_req, rst_translator:reset_req_in]
	wire         sys_sdram_pll_reset_source_reset;                                        // sys_sdram_pll:reset_source_reset -> rst_controller:reset_in0
	wire         rst_controller_001_reset_out_reset;                                      // rst_controller_001:reset_out -> [fifo:reset_stream_out, vga_controller:reset]
	wire         video_clk_reset_source_reset;                                            // video_clk:reset_source_reset -> rst_controller_001:reset_in0
	wire         rst_controller_002_reset_out_reset;                                      // rst_controller_002:reset_out -> [mm_interconnect_1:sysid_reset_reset_bridge_in_reset_reset, sdram_controller:reset_n, sysid:reset_n]

	lab2q_blender blender (
		.clk                      (sys_sdram_pll_sys_clk_clk),                         //                    clk.clk
		.reset                    (rst_controller_reset_out_reset),                    //                  reset.reset
		.foreground_data          (character_buffer_avalon_char_source_data),          // avalon_foreground_sink.data
		.foreground_startofpacket (character_buffer_avalon_char_source_startofpacket), //                       .startofpacket
		.foreground_endofpacket   (character_buffer_avalon_char_source_endofpacket),   //                       .endofpacket
		.foreground_valid         (character_buffer_avalon_char_source_valid),         //                       .valid
		.foreground_ready         (character_buffer_avalon_char_source_ready),         //                       .ready
		.background_data          (scaler_avalon_scaler_source_data),                  // avalon_background_sink.data
		.background_startofpacket (scaler_avalon_scaler_source_startofpacket),         //                       .startofpacket
		.background_endofpacket   (scaler_avalon_scaler_source_endofpacket),           //                       .endofpacket
		.background_valid         (scaler_avalon_scaler_source_valid),                 //                       .valid
		.background_ready         (scaler_avalon_scaler_source_ready),                 //                       .ready
		.output_ready             (blender_avalon_blended_source_ready),               //  avalon_blended_source.ready
		.output_data              (blender_avalon_blended_source_data),                //                       .data
		.output_startofpacket     (blender_avalon_blended_source_startofpacket),       //                       .startofpacket
		.output_endofpacket       (blender_avalon_blended_source_endofpacket),         //                       .endofpacket
		.output_valid             (blender_avalon_blended_source_valid)                //                       .valid
	);

	lab2q_character_buffer character_buffer (
		.clk                  (sys_sdram_pll_sys_clk_clk),                                               //                       clk.clk
		.reset                (rst_controller_reset_out_reset),                                          //                     reset.reset
		.ctrl_address         (mm_interconnect_1_character_buffer_avalon_char_control_slave_address),    // avalon_char_control_slave.address
		.ctrl_byteenable      (mm_interconnect_1_character_buffer_avalon_char_control_slave_byteenable), //                          .byteenable
		.ctrl_chipselect      (mm_interconnect_1_character_buffer_avalon_char_control_slave_chipselect), //                          .chipselect
		.ctrl_read            (mm_interconnect_1_character_buffer_avalon_char_control_slave_read),       //                          .read
		.ctrl_write           (mm_interconnect_1_character_buffer_avalon_char_control_slave_write),      //                          .write
		.ctrl_writedata       (mm_interconnect_1_character_buffer_avalon_char_control_slave_writedata),  //                          .writedata
		.ctrl_readdata        (mm_interconnect_1_character_buffer_avalon_char_control_slave_readdata),   //                          .readdata
		.buf_byteenable       (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_byteenable),  //  avalon_char_buffer_slave.byteenable
		.buf_chipselect       (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_chipselect),  //                          .chipselect
		.buf_read             (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_read),        //                          .read
		.buf_write            (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_write),       //                          .write
		.buf_writedata        (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_writedata),   //                          .writedata
		.buf_readdata         (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_readdata),    //                          .readdata
		.buf_waitrequest      (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_waitrequest), //                          .waitrequest
		.buf_address          (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_address),     //                          .address
		.stream_ready         (character_buffer_avalon_char_source_ready),                               //        avalon_char_source.ready
		.stream_startofpacket (character_buffer_avalon_char_source_startofpacket),                       //                          .startofpacket
		.stream_endofpacket   (character_buffer_avalon_char_source_endofpacket),                         //                          .endofpacket
		.stream_valid         (character_buffer_avalon_char_source_valid),                               //                          .valid
		.stream_data          (character_buffer_avalon_char_source_data)                                 //                          .data
	);

	lab2q_cpu cpu (
		.clk                                   (sys_sdram_pll_sys_clk_clk),                           //                       clk.clk
		.reset_n                               (~rst_controller_reset_out_reset),                     //                   reset_n.reset_n
		.reset_req                             (rst_controller_reset_out_reset_req),                  //                          .reset_req
		.d_address                             (cpu_data_master_address),                             //               data_master.address
		.d_byteenable                          (cpu_data_master_byteenable),                          //                          .byteenable
		.d_read                                (cpu_data_master_read),                                //                          .read
		.d_readdata                            (cpu_data_master_readdata),                            //                          .readdata
		.d_waitrequest                         (cpu_data_master_waitrequest),                         //                          .waitrequest
		.d_write                               (cpu_data_master_write),                               //                          .write
		.d_writedata                           (cpu_data_master_writedata),                           //                          .writedata
		.jtag_debug_module_debugaccess_to_roms (cpu_data_master_debugaccess),                         //                          .debugaccess
		.i_address                             (cpu_instruction_master_address),                      //        instruction_master.address
		.i_read                                (cpu_instruction_master_read),                         //                          .read
		.i_readdata                            (cpu_instruction_master_readdata),                     //                          .readdata
		.i_waitrequest                         (cpu_instruction_master_waitrequest),                  //                          .waitrequest
		.i_readdatavalid                       (cpu_instruction_master_readdatavalid),                //                          .readdatavalid
		.d_irq                                 (cpu_d_irq_irq),                                       //                     d_irq.irq
		.jtag_debug_module_resetrequest        (),                                                    //   jtag_debug_module_reset.reset
		.jtag_debug_module_address             (mm_interconnect_1_cpu_jtag_debug_module_address),     //         jtag_debug_module.address
		.jtag_debug_module_byteenable          (mm_interconnect_1_cpu_jtag_debug_module_byteenable),  //                          .byteenable
		.jtag_debug_module_debugaccess         (mm_interconnect_1_cpu_jtag_debug_module_debugaccess), //                          .debugaccess
		.jtag_debug_module_read                (mm_interconnect_1_cpu_jtag_debug_module_read),        //                          .read
		.jtag_debug_module_readdata            (mm_interconnect_1_cpu_jtag_debug_module_readdata),    //                          .readdata
		.jtag_debug_module_waitrequest         (mm_interconnect_1_cpu_jtag_debug_module_waitrequest), //                          .waitrequest
		.jtag_debug_module_write               (mm_interconnect_1_cpu_jtag_debug_module_write),       //                          .write
		.jtag_debug_module_writedata           (mm_interconnect_1_cpu_jtag_debug_module_writedata),   //                          .writedata
		.no_ci_readra                          ()                                                     // custom_instruction_master.readra
	);

	lab2q_fifo fifo (
		.clk_stream_in            (sys_sdram_pll_sys_clk_clk),                   //         clock_stream_in.clk
		.reset_stream_in          (rst_controller_reset_out_reset),              //         reset_stream_in.reset
		.clk_stream_out           (video_clk_vga_clk_clk),                       //        clock_stream_out.clk
		.reset_stream_out         (rst_controller_001_reset_out_reset),          //        reset_stream_out.reset
		.stream_in_ready          (blender_avalon_blended_source_ready),         //   avalon_dc_buffer_sink.ready
		.stream_in_startofpacket  (blender_avalon_blended_source_startofpacket), //                        .startofpacket
		.stream_in_endofpacket    (blender_avalon_blended_source_endofpacket),   //                        .endofpacket
		.stream_in_valid          (blender_avalon_blended_source_valid),         //                        .valid
		.stream_in_data           (blender_avalon_blended_source_data),          //                        .data
		.stream_out_ready         (fifo_avalon_dc_buffer_source_ready),          // avalon_dc_buffer_source.ready
		.stream_out_startofpacket (fifo_avalon_dc_buffer_source_startofpacket),  //                        .startofpacket
		.stream_out_endofpacket   (fifo_avalon_dc_buffer_source_endofpacket),    //                        .endofpacket
		.stream_out_valid         (fifo_avalon_dc_buffer_source_valid),          //                        .valid
		.stream_out_data          (fifo_avalon_dc_buffer_source_data)            //                        .data
	);

	lab2q_jtag_uart jtag_uart (
		.clk            (sys_sdram_pll_sys_clk_clk),                                 //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                           //             reset.reset_n
		.av_chipselect  (mm_interconnect_1_jtag_uart_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_1_jtag_uart_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_1_jtag_uart_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_1_jtag_uart_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_1_jtag_uart_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_1_jtag_uart_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_1_jtag_uart_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver1_irq)                                   //               irq.irq
	);

	lab2q_mouse_0 mouse_0 (
		.clk         (sys_sdram_pll_sys_clk_clk),                              //                clk.clk
		.reset       (rst_controller_reset_out_reset),                         //              reset.reset
		.address     (mm_interconnect_1_mouse_0_avalon_ps2_slave_address),     //   avalon_ps2_slave.address
		.chipselect  (mm_interconnect_1_mouse_0_avalon_ps2_slave_chipselect),  //                   .chipselect
		.byteenable  (mm_interconnect_1_mouse_0_avalon_ps2_slave_byteenable),  //                   .byteenable
		.read        (mm_interconnect_1_mouse_0_avalon_ps2_slave_read),        //                   .read
		.write       (mm_interconnect_1_mouse_0_avalon_ps2_slave_write),       //                   .write
		.writedata   (mm_interconnect_1_mouse_0_avalon_ps2_slave_writedata),   //                   .writedata
		.readdata    (mm_interconnect_1_mouse_0_avalon_ps2_slave_readdata),    //                   .readdata
		.waitrequest (mm_interconnect_1_mouse_0_avalon_ps2_slave_waitrequest), //                   .waitrequest
		.irq         (irq_mapper_receiver0_irq),                               //          interrupt.irq
		.PS2_CLK     (mouse_CLK),                                              // external_interface.export
		.PS2_DAT     (mouse_DAT)                                               //                   .export
	);

	lab2q_onchip_mem onchip_mem (
		.clk        (sys_sdram_pll_sys_clk_clk),                  //   clk1.clk
		.address    (mm_interconnect_0_onchip_mem_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_mem_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_mem_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_mem_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_mem_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_mem_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_mem_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),             // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)          //       .reset_req
	);

	lab2q_pixel_buffer pixel_buffer (
		.clk                  (sys_sdram_pll_sys_clk_clk),                                      //                     clk.clk
		.reset                (rst_controller_reset_out_reset),                                 //                   reset.reset
		.master_readdatavalid (pixel_buffer_avalon_pixel_dma_master_readdatavalid),             // avalon_pixel_dma_master.readdatavalid
		.master_waitrequest   (pixel_buffer_avalon_pixel_dma_master_waitrequest),               //                        .waitrequest
		.master_address       (pixel_buffer_avalon_pixel_dma_master_address),                   //                        .address
		.master_arbiterlock   (pixel_buffer_avalon_pixel_dma_master_lock),                      //                        .lock
		.master_read          (pixel_buffer_avalon_pixel_dma_master_read),                      //                        .read
		.master_readdata      (pixel_buffer_avalon_pixel_dma_master_readdata),                  //                        .readdata
		.slave_address        (mm_interconnect_1_pixel_buffer_avalon_control_slave_address),    //    avalon_control_slave.address
		.slave_byteenable     (mm_interconnect_1_pixel_buffer_avalon_control_slave_byteenable), //                        .byteenable
		.slave_read           (mm_interconnect_1_pixel_buffer_avalon_control_slave_read),       //                        .read
		.slave_write          (mm_interconnect_1_pixel_buffer_avalon_control_slave_write),      //                        .write
		.slave_writedata      (mm_interconnect_1_pixel_buffer_avalon_control_slave_writedata),  //                        .writedata
		.slave_readdata       (mm_interconnect_1_pixel_buffer_avalon_control_slave_readdata),   //                        .readdata
		.stream_ready         (pixel_buffer_avalon_pixel_source_ready),                         //     avalon_pixel_source.ready
		.stream_startofpacket (pixel_buffer_avalon_pixel_source_startofpacket),                 //                        .startofpacket
		.stream_endofpacket   (pixel_buffer_avalon_pixel_source_endofpacket),                   //                        .endofpacket
		.stream_valid         (pixel_buffer_avalon_pixel_source_valid),                         //                        .valid
		.stream_data          (pixel_buffer_avalon_pixel_source_data)                           //                        .data
	);

	lab2q_resampler resampler (
		.clk                      (sys_sdram_pll_sys_clk_clk),                      //               clk.clk
		.reset                    (rst_controller_reset_out_reset),                 //             reset.reset
		.stream_in_startofpacket  (pixel_buffer_avalon_pixel_source_startofpacket), //   avalon_rgb_sink.startofpacket
		.stream_in_endofpacket    (pixel_buffer_avalon_pixel_source_endofpacket),   //                  .endofpacket
		.stream_in_valid          (pixel_buffer_avalon_pixel_source_valid),         //                  .valid
		.stream_in_ready          (pixel_buffer_avalon_pixel_source_ready),         //                  .ready
		.stream_in_data           (pixel_buffer_avalon_pixel_source_data),          //                  .data
		.stream_out_ready         (resampler_avalon_rgb_source_ready),              // avalon_rgb_source.ready
		.stream_out_startofpacket (resampler_avalon_rgb_source_startofpacket),      //                  .startofpacket
		.stream_out_endofpacket   (resampler_avalon_rgb_source_endofpacket),        //                  .endofpacket
		.stream_out_valid         (resampler_avalon_rgb_source_valid),              //                  .valid
		.stream_out_data          (resampler_avalon_rgb_source_data)                //                  .data
	);

	lab2q_scaler scaler (
		.clk                      (sys_sdram_pll_sys_clk_clk),                 //                  clk.clk
		.reset                    (rst_controller_reset_out_reset),            //                reset.reset
		.stream_in_startofpacket  (resampler_avalon_rgb_source_startofpacket), //   avalon_scaler_sink.startofpacket
		.stream_in_endofpacket    (resampler_avalon_rgb_source_endofpacket),   //                     .endofpacket
		.stream_in_valid          (resampler_avalon_rgb_source_valid),         //                     .valid
		.stream_in_ready          (resampler_avalon_rgb_source_ready),         //                     .ready
		.stream_in_data           (resampler_avalon_rgb_source_data),          //                     .data
		.stream_out_ready         (scaler_avalon_scaler_source_ready),         // avalon_scaler_source.ready
		.stream_out_startofpacket (scaler_avalon_scaler_source_startofpacket), //                     .startofpacket
		.stream_out_endofpacket   (scaler_avalon_scaler_source_endofpacket),   //                     .endofpacket
		.stream_out_valid         (scaler_avalon_scaler_source_valid),         //                     .valid
		.stream_out_data          (scaler_avalon_scaler_source_data)           //                     .data
	);

	lab2q_sdram_controller sdram_controller (
		.clk            (sys_sdram_pll_sys_clk_clk),                           //   clk.clk
		.reset_n        (~rst_controller_002_reset_out_reset),                 // reset.reset_n
		.az_addr        (mm_interconnect_1_sdram_controller_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_1_sdram_controller_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_1_sdram_controller_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_1_sdram_controller_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_1_sdram_controller_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_1_sdram_controller_s1_write),        //      .write_n
		.za_data        (mm_interconnect_1_sdram_controller_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_1_sdram_controller_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_1_sdram_controller_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sram_addr),                                           //  wire.export
		.zs_ba          (sram_ba),                                             //      .export
		.zs_cas_n       (sram_cas_n),                                          //      .export
		.zs_cke         (sram_cke),                                            //      .export
		.zs_cs_n        (sram_cs_n),                                           //      .export
		.zs_dq          (sram_dq),                                             //      .export
		.zs_dqm         (sram_dqm),                                            //      .export
		.zs_ras_n       (sram_ras_n),                                          //      .export
		.zs_we_n        (sram_we_n)                                            //      .export
	);

	lab2q_sys_sdram_pll sys_sdram_pll (
		.ref_clk_clk        (clk_clk),                          //      ref_clk.clk
		.ref_reset_reset    (~reset_reset_n),                   //    ref_reset.reset
		.sys_clk_clk        (sys_sdram_pll_sys_clk_clk),        //      sys_clk.clk
		.sdram_clk_clk      (clk_sdram_clk),                    //    sdram_clk.clk
		.reset_source_reset (sys_sdram_pll_reset_source_reset)  // reset_source.reset
	);

	lab2q_sysid sysid (
		.clock    (sys_sdram_pll_sys_clk_clk),                      //           clk.clk
		.reset_n  (~rst_controller_002_reset_out_reset),            //         reset.reset_n
		.readdata (mm_interconnect_1_sysid_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_1_sysid_control_slave_address)   //              .address
	);

	lab2q_vga_controller vga_controller (
		.clk           (video_clk_vga_clk_clk),                      //                clk.clk
		.reset         (rst_controller_001_reset_out_reset),         //              reset.reset
		.data          (fifo_avalon_dc_buffer_source_data),          //    avalon_vga_sink.data
		.startofpacket (fifo_avalon_dc_buffer_source_startofpacket), //                   .startofpacket
		.endofpacket   (fifo_avalon_dc_buffer_source_endofpacket),   //                   .endofpacket
		.valid         (fifo_avalon_dc_buffer_source_valid),         //                   .valid
		.ready         (fifo_avalon_dc_buffer_source_ready),         //                   .ready
		.VGA_CLK       (vga_out_CLK),                                // external_interface.export
		.VGA_HS        (vga_out_HS),                                 //                   .export
		.VGA_VS        (vga_out_VS),                                 //                   .export
		.VGA_BLANK     (vga_out_BLANK),                              //                   .export
		.VGA_SYNC      (vga_out_SYNC),                               //                   .export
		.VGA_R         (vga_out_R),                                  //                   .export
		.VGA_G         (vga_out_G),                                  //                   .export
		.VGA_B         (vga_out_B)                                   //                   .export
	);

	lab2q_video_clk video_clk (
		.ref_clk_clk        (clk_clk),                      //      ref_clk.clk
		.ref_reset_reset    (~reset_reset_n),               //    ref_reset.reset
		.video_in_clk_clk   (),                             // video_in_clk.clk
		.vga_clk_clk        (video_clk_vga_clk_clk),        //      vga_clk.clk
		.reset_source_reset (video_clk_reset_source_reset)  // reset_source.reset
	);

	lab2q_mm_interconnect_0 mm_interconnect_0 (
		.sys_sdram_pll_sys_clk_clk                          (sys_sdram_pll_sys_clk_clk),                          //                    sys_sdram_pll_sys_clk.clk
		.pixel_buffer_reset_reset_bridge_in_reset_reset     (rst_controller_reset_out_reset),                     // pixel_buffer_reset_reset_bridge_in_reset.reset
		.pixel_buffer_avalon_pixel_dma_master_address       (pixel_buffer_avalon_pixel_dma_master_address),       //     pixel_buffer_avalon_pixel_dma_master.address
		.pixel_buffer_avalon_pixel_dma_master_waitrequest   (pixel_buffer_avalon_pixel_dma_master_waitrequest),   //                                         .waitrequest
		.pixel_buffer_avalon_pixel_dma_master_read          (pixel_buffer_avalon_pixel_dma_master_read),          //                                         .read
		.pixel_buffer_avalon_pixel_dma_master_readdata      (pixel_buffer_avalon_pixel_dma_master_readdata),      //                                         .readdata
		.pixel_buffer_avalon_pixel_dma_master_readdatavalid (pixel_buffer_avalon_pixel_dma_master_readdatavalid), //                                         .readdatavalid
		.pixel_buffer_avalon_pixel_dma_master_lock          (pixel_buffer_avalon_pixel_dma_master_lock),          //                                         .lock
		.onchip_mem_s1_address                              (mm_interconnect_0_onchip_mem_s1_address),            //                            onchip_mem_s1.address
		.onchip_mem_s1_write                                (mm_interconnect_0_onchip_mem_s1_write),              //                                         .write
		.onchip_mem_s1_readdata                             (mm_interconnect_0_onchip_mem_s1_readdata),           //                                         .readdata
		.onchip_mem_s1_writedata                            (mm_interconnect_0_onchip_mem_s1_writedata),          //                                         .writedata
		.onchip_mem_s1_byteenable                           (mm_interconnect_0_onchip_mem_s1_byteenable),         //                                         .byteenable
		.onchip_mem_s1_chipselect                           (mm_interconnect_0_onchip_mem_s1_chipselect),         //                                         .chipselect
		.onchip_mem_s1_clken                                (mm_interconnect_0_onchip_mem_s1_clken)               //                                         .clken
	);

	lab2q_mm_interconnect_1 mm_interconnect_1 (
		.sys_sdram_pll_sys_clk_clk                             (sys_sdram_pll_sys_clk_clk),                                               //                      sys_sdram_pll_sys_clk.clk
		.cpu_reset_n_reset_bridge_in_reset_reset               (rst_controller_reset_out_reset),                                          //          cpu_reset_n_reset_bridge_in_reset.reset
		.sysid_reset_reset_bridge_in_reset_reset               (rst_controller_002_reset_out_reset),                                      //          sysid_reset_reset_bridge_in_reset.reset
		.cpu_data_master_address                               (cpu_data_master_address),                                                 //                            cpu_data_master.address
		.cpu_data_master_waitrequest                           (cpu_data_master_waitrequest),                                             //                                           .waitrequest
		.cpu_data_master_byteenable                            (cpu_data_master_byteenable),                                              //                                           .byteenable
		.cpu_data_master_read                                  (cpu_data_master_read),                                                    //                                           .read
		.cpu_data_master_readdata                              (cpu_data_master_readdata),                                                //                                           .readdata
		.cpu_data_master_write                                 (cpu_data_master_write),                                                   //                                           .write
		.cpu_data_master_writedata                             (cpu_data_master_writedata),                                               //                                           .writedata
		.cpu_data_master_debugaccess                           (cpu_data_master_debugaccess),                                             //                                           .debugaccess
		.cpu_instruction_master_address                        (cpu_instruction_master_address),                                          //                     cpu_instruction_master.address
		.cpu_instruction_master_waitrequest                    (cpu_instruction_master_waitrequest),                                      //                                           .waitrequest
		.cpu_instruction_master_read                           (cpu_instruction_master_read),                                             //                                           .read
		.cpu_instruction_master_readdata                       (cpu_instruction_master_readdata),                                         //                                           .readdata
		.cpu_instruction_master_readdatavalid                  (cpu_instruction_master_readdatavalid),                                    //                                           .readdatavalid
		.character_buffer_avalon_char_buffer_slave_address     (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_address),     //  character_buffer_avalon_char_buffer_slave.address
		.character_buffer_avalon_char_buffer_slave_write       (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_write),       //                                           .write
		.character_buffer_avalon_char_buffer_slave_read        (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_read),        //                                           .read
		.character_buffer_avalon_char_buffer_slave_readdata    (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_readdata),    //                                           .readdata
		.character_buffer_avalon_char_buffer_slave_writedata   (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_writedata),   //                                           .writedata
		.character_buffer_avalon_char_buffer_slave_byteenable  (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_byteenable),  //                                           .byteenable
		.character_buffer_avalon_char_buffer_slave_waitrequest (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_waitrequest), //                                           .waitrequest
		.character_buffer_avalon_char_buffer_slave_chipselect  (mm_interconnect_1_character_buffer_avalon_char_buffer_slave_chipselect),  //                                           .chipselect
		.character_buffer_avalon_char_control_slave_address    (mm_interconnect_1_character_buffer_avalon_char_control_slave_address),    // character_buffer_avalon_char_control_slave.address
		.character_buffer_avalon_char_control_slave_write      (mm_interconnect_1_character_buffer_avalon_char_control_slave_write),      //                                           .write
		.character_buffer_avalon_char_control_slave_read       (mm_interconnect_1_character_buffer_avalon_char_control_slave_read),       //                                           .read
		.character_buffer_avalon_char_control_slave_readdata   (mm_interconnect_1_character_buffer_avalon_char_control_slave_readdata),   //                                           .readdata
		.character_buffer_avalon_char_control_slave_writedata  (mm_interconnect_1_character_buffer_avalon_char_control_slave_writedata),  //                                           .writedata
		.character_buffer_avalon_char_control_slave_byteenable (mm_interconnect_1_character_buffer_avalon_char_control_slave_byteenable), //                                           .byteenable
		.character_buffer_avalon_char_control_slave_chipselect (mm_interconnect_1_character_buffer_avalon_char_control_slave_chipselect), //                                           .chipselect
		.cpu_jtag_debug_module_address                         (mm_interconnect_1_cpu_jtag_debug_module_address),                         //                      cpu_jtag_debug_module.address
		.cpu_jtag_debug_module_write                           (mm_interconnect_1_cpu_jtag_debug_module_write),                           //                                           .write
		.cpu_jtag_debug_module_read                            (mm_interconnect_1_cpu_jtag_debug_module_read),                            //                                           .read
		.cpu_jtag_debug_module_readdata                        (mm_interconnect_1_cpu_jtag_debug_module_readdata),                        //                                           .readdata
		.cpu_jtag_debug_module_writedata                       (mm_interconnect_1_cpu_jtag_debug_module_writedata),                       //                                           .writedata
		.cpu_jtag_debug_module_byteenable                      (mm_interconnect_1_cpu_jtag_debug_module_byteenable),                      //                                           .byteenable
		.cpu_jtag_debug_module_waitrequest                     (mm_interconnect_1_cpu_jtag_debug_module_waitrequest),                     //                                           .waitrequest
		.cpu_jtag_debug_module_debugaccess                     (mm_interconnect_1_cpu_jtag_debug_module_debugaccess),                     //                                           .debugaccess
		.jtag_uart_avalon_jtag_slave_address                   (mm_interconnect_1_jtag_uart_avalon_jtag_slave_address),                   //                jtag_uart_avalon_jtag_slave.address
		.jtag_uart_avalon_jtag_slave_write                     (mm_interconnect_1_jtag_uart_avalon_jtag_slave_write),                     //                                           .write
		.jtag_uart_avalon_jtag_slave_read                      (mm_interconnect_1_jtag_uart_avalon_jtag_slave_read),                      //                                           .read
		.jtag_uart_avalon_jtag_slave_readdata                  (mm_interconnect_1_jtag_uart_avalon_jtag_slave_readdata),                  //                                           .readdata
		.jtag_uart_avalon_jtag_slave_writedata                 (mm_interconnect_1_jtag_uart_avalon_jtag_slave_writedata),                 //                                           .writedata
		.jtag_uart_avalon_jtag_slave_waitrequest               (mm_interconnect_1_jtag_uart_avalon_jtag_slave_waitrequest),               //                                           .waitrequest
		.jtag_uart_avalon_jtag_slave_chipselect                (mm_interconnect_1_jtag_uart_avalon_jtag_slave_chipselect),                //                                           .chipselect
		.mouse_0_avalon_ps2_slave_address                      (mm_interconnect_1_mouse_0_avalon_ps2_slave_address),                      //                   mouse_0_avalon_ps2_slave.address
		.mouse_0_avalon_ps2_slave_write                        (mm_interconnect_1_mouse_0_avalon_ps2_slave_write),                        //                                           .write
		.mouse_0_avalon_ps2_slave_read                         (mm_interconnect_1_mouse_0_avalon_ps2_slave_read),                         //                                           .read
		.mouse_0_avalon_ps2_slave_readdata                     (mm_interconnect_1_mouse_0_avalon_ps2_slave_readdata),                     //                                           .readdata
		.mouse_0_avalon_ps2_slave_writedata                    (mm_interconnect_1_mouse_0_avalon_ps2_slave_writedata),                    //                                           .writedata
		.mouse_0_avalon_ps2_slave_byteenable                   (mm_interconnect_1_mouse_0_avalon_ps2_slave_byteenable),                   //                                           .byteenable
		.mouse_0_avalon_ps2_slave_waitrequest                  (mm_interconnect_1_mouse_0_avalon_ps2_slave_waitrequest),                  //                                           .waitrequest
		.mouse_0_avalon_ps2_slave_chipselect                   (mm_interconnect_1_mouse_0_avalon_ps2_slave_chipselect),                   //                                           .chipselect
		.pixel_buffer_avalon_control_slave_address             (mm_interconnect_1_pixel_buffer_avalon_control_slave_address),             //          pixel_buffer_avalon_control_slave.address
		.pixel_buffer_avalon_control_slave_write               (mm_interconnect_1_pixel_buffer_avalon_control_slave_write),               //                                           .write
		.pixel_buffer_avalon_control_slave_read                (mm_interconnect_1_pixel_buffer_avalon_control_slave_read),                //                                           .read
		.pixel_buffer_avalon_control_slave_readdata            (mm_interconnect_1_pixel_buffer_avalon_control_slave_readdata),            //                                           .readdata
		.pixel_buffer_avalon_control_slave_writedata           (mm_interconnect_1_pixel_buffer_avalon_control_slave_writedata),           //                                           .writedata
		.pixel_buffer_avalon_control_slave_byteenable          (mm_interconnect_1_pixel_buffer_avalon_control_slave_byteenable),          //                                           .byteenable
		.sdram_controller_s1_address                           (mm_interconnect_1_sdram_controller_s1_address),                           //                        sdram_controller_s1.address
		.sdram_controller_s1_write                             (mm_interconnect_1_sdram_controller_s1_write),                             //                                           .write
		.sdram_controller_s1_read                              (mm_interconnect_1_sdram_controller_s1_read),                              //                                           .read
		.sdram_controller_s1_readdata                          (mm_interconnect_1_sdram_controller_s1_readdata),                          //                                           .readdata
		.sdram_controller_s1_writedata                         (mm_interconnect_1_sdram_controller_s1_writedata),                         //                                           .writedata
		.sdram_controller_s1_byteenable                        (mm_interconnect_1_sdram_controller_s1_byteenable),                        //                                           .byteenable
		.sdram_controller_s1_readdatavalid                     (mm_interconnect_1_sdram_controller_s1_readdatavalid),                     //                                           .readdatavalid
		.sdram_controller_s1_waitrequest                       (mm_interconnect_1_sdram_controller_s1_waitrequest),                       //                                           .waitrequest
		.sdram_controller_s1_chipselect                        (mm_interconnect_1_sdram_controller_s1_chipselect),                        //                                           .chipselect
		.sysid_control_slave_address                           (mm_interconnect_1_sysid_control_slave_address),                           //                        sysid_control_slave.address
		.sysid_control_slave_readdata                          (mm_interconnect_1_sysid_control_slave_readdata)                           //                                           .readdata
	);

	lab2q_irq_mapper irq_mapper (
		.clk           (sys_sdram_pll_sys_clk_clk),      //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.sender_irq    (cpu_d_irq_irq)                   //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (sys_sdram_pll_reset_source_reset),   // reset_in0.reset
		.clk            (sys_sdram_pll_sys_clk_clk),          //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (video_clk_reset_source_reset),       // reset_in0.reset
		.clk            (video_clk_vga_clk_clk),              //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (sys_sdram_pll_sys_clk_clk),          //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
