// lab2.v

// Generated using ACDS version 14.1 186 at 2015.05.24.13:55:13

`timescale 1 ps / 1 ps
module lab2 (
		input  wire  clk_clk,       //   clk.clk
		input  wire  reset_reset_n  // reset.reset_n
	);

	wire  [31:0] nios2_qsys_0_data_master_readdata;                            // mm_interconnect_0:nios2_qsys_0_data_master_readdata -> nios2_qsys_0:d_readdata
	wire         nios2_qsys_0_data_master_waitrequest;                         // mm_interconnect_0:nios2_qsys_0_data_master_waitrequest -> nios2_qsys_0:d_waitrequest
	wire         nios2_qsys_0_data_master_debugaccess;                         // nios2_qsys_0:jtag_debug_module_debugaccess_to_roms -> mm_interconnect_0:nios2_qsys_0_data_master_debugaccess
	wire  [11:0] nios2_qsys_0_data_master_address;                             // nios2_qsys_0:d_address -> mm_interconnect_0:nios2_qsys_0_data_master_address
	wire   [3:0] nios2_qsys_0_data_master_byteenable;                          // nios2_qsys_0:d_byteenable -> mm_interconnect_0:nios2_qsys_0_data_master_byteenable
	wire         nios2_qsys_0_data_master_read;                                // nios2_qsys_0:d_read -> mm_interconnect_0:nios2_qsys_0_data_master_read
	wire         nios2_qsys_0_data_master_write;                               // nios2_qsys_0:d_write -> mm_interconnect_0:nios2_qsys_0_data_master_write
	wire  [31:0] nios2_qsys_0_data_master_writedata;                           // nios2_qsys_0:d_writedata -> mm_interconnect_0:nios2_qsys_0_data_master_writedata
	wire  [31:0] nios2_qsys_0_instruction_master_readdata;                     // mm_interconnect_0:nios2_qsys_0_instruction_master_readdata -> nios2_qsys_0:i_readdata
	wire         nios2_qsys_0_instruction_master_waitrequest;                  // mm_interconnect_0:nios2_qsys_0_instruction_master_waitrequest -> nios2_qsys_0:i_waitrequest
	wire  [11:0] nios2_qsys_0_instruction_master_address;                      // nios2_qsys_0:i_address -> mm_interconnect_0:nios2_qsys_0_instruction_master_address
	wire         nios2_qsys_0_instruction_master_read;                         // nios2_qsys_0:i_read -> mm_interconnect_0:nios2_qsys_0_instruction_master_read
	wire         nios2_qsys_0_instruction_master_readdatavalid;                // mm_interconnect_0:nios2_qsys_0_instruction_master_readdatavalid -> nios2_qsys_0:i_readdatavalid
	wire  [31:0] mm_interconnect_0_nios2_qsys_0_jtag_debug_module_readdata;    // nios2_qsys_0:jtag_debug_module_readdata -> mm_interconnect_0:nios2_qsys_0_jtag_debug_module_readdata
	wire         mm_interconnect_0_nios2_qsys_0_jtag_debug_module_waitrequest; // nios2_qsys_0:jtag_debug_module_waitrequest -> mm_interconnect_0:nios2_qsys_0_jtag_debug_module_waitrequest
	wire         mm_interconnect_0_nios2_qsys_0_jtag_debug_module_debugaccess; // mm_interconnect_0:nios2_qsys_0_jtag_debug_module_debugaccess -> nios2_qsys_0:jtag_debug_module_debugaccess
	wire   [8:0] mm_interconnect_0_nios2_qsys_0_jtag_debug_module_address;     // mm_interconnect_0:nios2_qsys_0_jtag_debug_module_address -> nios2_qsys_0:jtag_debug_module_address
	wire         mm_interconnect_0_nios2_qsys_0_jtag_debug_module_read;        // mm_interconnect_0:nios2_qsys_0_jtag_debug_module_read -> nios2_qsys_0:jtag_debug_module_read
	wire   [3:0] mm_interconnect_0_nios2_qsys_0_jtag_debug_module_byteenable;  // mm_interconnect_0:nios2_qsys_0_jtag_debug_module_byteenable -> nios2_qsys_0:jtag_debug_module_byteenable
	wire         mm_interconnect_0_nios2_qsys_0_jtag_debug_module_write;       // mm_interconnect_0:nios2_qsys_0_jtag_debug_module_write -> nios2_qsys_0:jtag_debug_module_write
	wire  [31:0] mm_interconnect_0_nios2_qsys_0_jtag_debug_module_writedata;   // mm_interconnect_0:nios2_qsys_0_jtag_debug_module_writedata -> nios2_qsys_0:jtag_debug_module_writedata
	wire  [31:0] nios2_qsys_0_d_irq_irq;                                       // irq_mapper:sender_irq -> nios2_qsys_0:d_irq

	lab2_jtag_uart_0 jtag_uart_0 (
		.clk            (), //               clk.clk
		.rst_n          (), //             reset.reset_n
		.av_chipselect  (), // avalon_jtag_slave.chipselect
		.av_address     (), //                  .address
		.av_read_n      (), //                  .read_n
		.av_readdata    (), //                  .readdata
		.av_write_n     (), //                  .write_n
		.av_writedata   (), //                  .writedata
		.av_waitrequest (), //                  .waitrequest
		.av_irq         ()  //               irq.irq
	);

	lab2_nios2_qsys_0 nios2_qsys_0 (
		.clk                                   (),                                                             //                       clk.clk
		.reset_n                               (),                                                             //                   reset_n.reset_n
		.reset_req                             (),                                                             //                          .reset_req
		.d_address                             (nios2_qsys_0_data_master_address),                             //               data_master.address
		.d_byteenable                          (nios2_qsys_0_data_master_byteenable),                          //                          .byteenable
		.d_read                                (nios2_qsys_0_data_master_read),                                //                          .read
		.d_readdata                            (nios2_qsys_0_data_master_readdata),                            //                          .readdata
		.d_waitrequest                         (nios2_qsys_0_data_master_waitrequest),                         //                          .waitrequest
		.d_write                               (nios2_qsys_0_data_master_write),                               //                          .write
		.d_writedata                           (nios2_qsys_0_data_master_writedata),                           //                          .writedata
		.jtag_debug_module_debugaccess_to_roms (nios2_qsys_0_data_master_debugaccess),                         //                          .debugaccess
		.i_address                             (nios2_qsys_0_instruction_master_address),                      //        instruction_master.address
		.i_read                                (nios2_qsys_0_instruction_master_read),                         //                          .read
		.i_readdata                            (nios2_qsys_0_instruction_master_readdata),                     //                          .readdata
		.i_waitrequest                         (nios2_qsys_0_instruction_master_waitrequest),                  //                          .waitrequest
		.i_readdatavalid                       (nios2_qsys_0_instruction_master_readdatavalid),                //                          .readdatavalid
		.d_irq                                 (nios2_qsys_0_d_irq_irq),                                       //                     d_irq.irq
		.jtag_debug_module_resetrequest        (),                                                             //   jtag_debug_module_reset.reset
		.jtag_debug_module_address             (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_address),     //         jtag_debug_module.address
		.jtag_debug_module_byteenable          (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_byteenable),  //                          .byteenable
		.jtag_debug_module_debugaccess         (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_debugaccess), //                          .debugaccess
		.jtag_debug_module_read                (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_read),        //                          .read
		.jtag_debug_module_readdata            (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_readdata),    //                          .readdata
		.jtag_debug_module_waitrequest         (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_waitrequest), //                          .waitrequest
		.jtag_debug_module_write               (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_write),       //                          .write
		.jtag_debug_module_writedata           (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_writedata),   //                          .writedata
		.no_ci_readra                          ()                                                              // custom_instruction_master.readra
	);

	lab2_onchip_memory2_0 onchip_memory2_0 (
		.clk        (), //   clk1.clk
		.address    (), //     s1.address
		.clken      (), //       .clken
		.chipselect (), //       .chipselect
		.write      (), //       .write
		.readdata   (), //       .readdata
		.writedata  (), //       .writedata
		.byteenable (), //       .byteenable
		.reset      (), // reset1.reset
		.reset_req  ()  //       .reset_req
	);

	lab2_ps2_0 ps2_0 (
		.clk         (), //                clk.clk
		.reset       (), //              reset.reset
		.address     (), //   avalon_ps2_slave.address
		.chipselect  (), //                   .chipselect
		.byteenable  (), //                   .byteenable
		.read        (), //                   .read
		.write       (), //                   .write
		.writedata   (), //                   .writedata
		.readdata    (), //                   .readdata
		.waitrequest (), //                   .waitrequest
		.irq         (), //          interrupt.irq
		.PS2_CLK     (), // external_interface.export
		.PS2_DAT     ()  //                   .export
	);

	lab2_sys_sdram_pll_0 sys_sdram_pll_0 (
		.ref_clk_clk        (), //      ref_clk.clk
		.ref_reset_reset    (), //    ref_reset.reset
		.sys_clk_clk        (), //      sys_clk.clk
		.sdram_clk_clk      (), //    sdram_clk.clk
		.reset_source_reset ()  // reset_source.reset
	);

	lab2_sysid_qsys_0 sysid_qsys_0 (
		.clock    (), //           clk.clk
		.reset_n  (), //         reset.reset_n
		.readdata (), // control_slave.readdata
		.address  ()  //              .address
	);

	lab2_video_alpha_blender_0 video_alpha_blender_0 (
		.clk                      (), //                    clk.clk
		.reset                    (), //                  reset.reset
		.foreground_data          (), // avalon_foreground_sink.data
		.foreground_startofpacket (), //                       .startofpacket
		.foreground_endofpacket   (), //                       .endofpacket
		.foreground_valid         (), //                       .valid
		.foreground_ready         (), //                       .ready
		.background_data          (), // avalon_background_sink.data
		.background_startofpacket (), //                       .startofpacket
		.background_endofpacket   (), //                       .endofpacket
		.background_valid         (), //                       .valid
		.background_ready         (), //                       .ready
		.output_ready             (), //  avalon_blended_source.ready
		.output_data              (), //                       .data
		.output_startofpacket     (), //                       .startofpacket
		.output_endofpacket       (), //                       .endofpacket
		.output_valid             ()  //                       .valid
	);

	lab2_video_character_buffer_with_dma_0 video_character_buffer_with_dma_0 (
		.clk                  (), //                       clk.clk
		.reset                (), //                     reset.reset
		.ctrl_address         (), // avalon_char_control_slave.address
		.ctrl_byteenable      (), //                          .byteenable
		.ctrl_chipselect      (), //                          .chipselect
		.ctrl_read            (), //                          .read
		.ctrl_write           (), //                          .write
		.ctrl_writedata       (), //                          .writedata
		.ctrl_readdata        (), //                          .readdata
		.buf_byteenable       (), //  avalon_char_buffer_slave.byteenable
		.buf_chipselect       (), //                          .chipselect
		.buf_read             (), //                          .read
		.buf_write            (), //                          .write
		.buf_writedata        (), //                          .writedata
		.buf_readdata         (), //                          .readdata
		.buf_waitrequest      (), //                          .waitrequest
		.buf_address          (), //                          .address
		.stream_ready         (), //        avalon_char_source.ready
		.stream_startofpacket (), //                          .startofpacket
		.stream_endofpacket   (), //                          .endofpacket
		.stream_valid         (), //                          .valid
		.stream_data          ()  //                          .data
	);

	lab2_video_dual_clock_buffer_0 video_dual_clock_buffer_0 (
		.clk_stream_in            (), //         clock_stream_in.clk
		.reset_stream_in          (), //         reset_stream_in.reset
		.clk_stream_out           (), //        clock_stream_out.clk
		.reset_stream_out         (), //        reset_stream_out.reset
		.stream_in_ready          (), //   avalon_dc_buffer_sink.ready
		.stream_in_startofpacket  (), //                        .startofpacket
		.stream_in_endofpacket    (), //                        .endofpacket
		.stream_in_valid          (), //                        .valid
		.stream_in_data           (), //                        .data
		.stream_out_ready         (), // avalon_dc_buffer_source.ready
		.stream_out_startofpacket (), //                        .startofpacket
		.stream_out_endofpacket   (), //                        .endofpacket
		.stream_out_valid         (), //                        .valid
		.stream_out_data          ()  //                        .data
	);

	lab2_video_pixel_buffer_dma_0 video_pixel_buffer_dma_0 (
		.clk                  (), //                     clk.clk
		.reset                (), //                   reset.reset
		.master_readdatavalid (), // avalon_pixel_dma_master.readdatavalid
		.master_waitrequest   (), //                        .waitrequest
		.master_address       (), //                        .address
		.master_arbiterlock   (), //                        .lock
		.master_read          (), //                        .read
		.master_readdata      (), //                        .readdata
		.slave_address        (), //    avalon_control_slave.address
		.slave_byteenable     (), //                        .byteenable
		.slave_read           (), //                        .read
		.slave_write          (), //                        .write
		.slave_writedata      (), //                        .writedata
		.slave_readdata       (), //                        .readdata
		.stream_ready         (), //     avalon_pixel_source.ready
		.stream_startofpacket (), //                        .startofpacket
		.stream_endofpacket   (), //                        .endofpacket
		.stream_valid         (), //                        .valid
		.stream_data          ()  //                        .data
	);

	lab2_video_pll_0 video_pll_0 (
		.ref_clk_clk        (), //      ref_clk.clk
		.ref_reset_reset    (), //    ref_reset.reset
		.video_in_clk_clk   (), // video_in_clk.clk
		.vga_clk_clk        (), //      vga_clk.clk
		.lcd_clk_clk        (), //      lcd_clk.clk
		.reset_source_reset ()  // reset_source.reset
	);

	lab2_video_rgb_resampler_0 video_rgb_resampler_0 (
		.clk                      (), //               clk.clk
		.reset                    (), //             reset.reset
		.stream_in_startofpacket  (), //   avalon_rgb_sink.startofpacket
		.stream_in_endofpacket    (), //                  .endofpacket
		.stream_in_valid          (), //                  .valid
		.stream_in_ready          (), //                  .ready
		.stream_in_data           (), //                  .data
		.stream_out_ready         (), // avalon_rgb_source.ready
		.stream_out_startofpacket (), //                  .startofpacket
		.stream_out_endofpacket   (), //                  .endofpacket
		.stream_out_valid         (), //                  .valid
		.stream_out_data          ()  //                  .data
	);

	lab2_video_scaler_0 video_scaler_0 (
		.clk                      (), //                  clk.clk
		.reset                    (), //                reset.reset
		.stream_in_startofpacket  (), //   avalon_scaler_sink.startofpacket
		.stream_in_endofpacket    (), //                     .endofpacket
		.stream_in_valid          (), //                     .valid
		.stream_in_ready          (), //                     .ready
		.stream_in_data           (), //                     .data
		.stream_out_ready         (), // avalon_scaler_source.ready
		.stream_out_startofpacket (), //                     .startofpacket
		.stream_out_endofpacket   (), //                     .endofpacket
		.stream_out_valid         (), //                     .valid
		.stream_out_data          ()  //                     .data
	);

	lab2_video_vga_controller_0 video_vga_controller_0 (
		.clk           (), //                clk.clk
		.reset         (), //              reset.reset
		.data          (), //    avalon_vga_sink.data
		.startofpacket (), //                   .startofpacket
		.endofpacket   (), //                   .endofpacket
		.valid         (), //                   .valid
		.ready         (), //                   .ready
		.VGA_CLK       (), // external_interface.export
		.VGA_HS        (), //                   .export
		.VGA_VS        (), //                   .export
		.VGA_BLANK     (), //                   .export
		.VGA_SYNC      (), //                   .export
		.VGA_R         (), //                   .export
		.VGA_G         (), //                   .export
		.VGA_B         ()  //                   .export
	);

	lab2_mm_interconnect_0 mm_interconnect_0 (
		.nios2_qsys_0_data_master_address              (nios2_qsys_0_data_master_address),                             //        nios2_qsys_0_data_master.address
		.nios2_qsys_0_data_master_waitrequest          (nios2_qsys_0_data_master_waitrequest),                         //                                .waitrequest
		.nios2_qsys_0_data_master_byteenable           (nios2_qsys_0_data_master_byteenable),                          //                                .byteenable
		.nios2_qsys_0_data_master_read                 (nios2_qsys_0_data_master_read),                                //                                .read
		.nios2_qsys_0_data_master_readdata             (nios2_qsys_0_data_master_readdata),                            //                                .readdata
		.nios2_qsys_0_data_master_write                (nios2_qsys_0_data_master_write),                               //                                .write
		.nios2_qsys_0_data_master_writedata            (nios2_qsys_0_data_master_writedata),                           //                                .writedata
		.nios2_qsys_0_data_master_debugaccess          (nios2_qsys_0_data_master_debugaccess),                         //                                .debugaccess
		.nios2_qsys_0_instruction_master_address       (nios2_qsys_0_instruction_master_address),                      // nios2_qsys_0_instruction_master.address
		.nios2_qsys_0_instruction_master_waitrequest   (nios2_qsys_0_instruction_master_waitrequest),                  //                                .waitrequest
		.nios2_qsys_0_instruction_master_read          (nios2_qsys_0_instruction_master_read),                         //                                .read
		.nios2_qsys_0_instruction_master_readdata      (nios2_qsys_0_instruction_master_readdata),                     //                                .readdata
		.nios2_qsys_0_instruction_master_readdatavalid (nios2_qsys_0_instruction_master_readdatavalid),                //                                .readdatavalid
		.nios2_qsys_0_jtag_debug_module_address        (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_address),     //  nios2_qsys_0_jtag_debug_module.address
		.nios2_qsys_0_jtag_debug_module_write          (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_write),       //                                .write
		.nios2_qsys_0_jtag_debug_module_read           (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_read),        //                                .read
		.nios2_qsys_0_jtag_debug_module_readdata       (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_readdata),    //                                .readdata
		.nios2_qsys_0_jtag_debug_module_writedata      (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_writedata),   //                                .writedata
		.nios2_qsys_0_jtag_debug_module_byteenable     (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_byteenable),  //                                .byteenable
		.nios2_qsys_0_jtag_debug_module_waitrequest    (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_waitrequest), //                                .waitrequest
		.nios2_qsys_0_jtag_debug_module_debugaccess    (mm_interconnect_0_nios2_qsys_0_jtag_debug_module_debugaccess)  //                                .debugaccess
	);

	lab2_irq_mapper irq_mapper (
		.clk        (),                       //       clk.clk
		.reset      (),                       // clk_reset.reset
		.sender_irq (nios2_qsys_0_d_irq_irq)  //    sender.irq
	);

endmodule
